version: 2.1

orbs:
  aws-eks: circleci/aws-eks@2.2.0
  kubernetes: circleci/kubernetes@1.3.1

jobs: 

  # lint: 
  #   docker: 
  #     - image: circleci/python:3.6.7-stretch
  #   steps: 
  #     - checkout
  #     - restore_cache:
  #         keys:
  #         - v1-dependencies-{{ checksum "requirements.txt" }}
  #     - run:
  #         name: install dependencies
  #         command: |
  #           python3 -m venv venv
  #           . venv/bin/activate
  #           pip install -r requirements.txt
  #     - run: 
  #         name: install hadolint 
  #         command: | 
  #           sudo wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v2.7.0/hadolint-Linux-x86_64
  #           sudo chmod +x /bin/hadolint
  #     - run: 
  #         name: linting dockerfile
  #         command: |
  #           . venv/bin/activate
  #           make lint
  #     - save_cache:
  #         paths:
  #           - ./venv
  #         key: v1-dependencies-{{ checksum "requirements.txt" }}


  # build-docker: 
  #   environment: 
  #     IMAGE_NAME: laclac0901/hello                     
  #   docker:
  #     - image: circleci/buildpack-deps:stretch
  #   working_directory: ~/devops-capstone
  #   steps:
  #     - checkout
  #     - setup_remote_docker
  #     - run:
  #         name: Build docker image
  #         command: |
  #           docker build -t $IMAGE_NAME:latest .
  #           echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
  #           docker push $IMAGE_NAME:latest

  create-k8s:
    docker:
      - image: 'cimg/python:3.10'
    parameters:
      cluster-name:
        description: Name of the EKS cluster
        type: string
        default: 'ngocht-eks'
    steps:
      - checkout
      - aws-eks/create-cluster:
          cluster-name: << parameters.cluster-name >>
          aws-region: ap-southeast-1
          node-type: t3.medium
          nodes: 1
          nodes-min: 1
          nodes-max: 2
      - run: 
          name: Debug
          command: |
            ls
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: ./files/deployment.yaml
          resource-name: deployment/app
          show-kubectl-command: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: ./files/service.yaml
          resource-name: deployment/app
          show-kubectl-command: true




      # - kubernetes/install:
      #     kubectl-version: v1.22.0
      # - aws-eks/update-kubeconfig-with-authenticator:
      #     cluster-name: << parameters.cluster-name >>
      # - run:
      #     name: Create kubernetes in AWS
      #     command: |
      #       kubectl get services

  # deploy-k8s:
  #   docker: 
  #     - image: 
  #   parameters:
  #     cluster-name:
  #       description: Name of the EKS cluster
  #       type: string
  #       default: 'ngocht-eks'
  #   steps: 
  #     - checkout
  #     - aws-eks/update-kubeconfig-with-authenticator:
  #         cluster-name: << parameters.cluster-name >>
  #         install-kubectl: true
      # - kubernetes/create-or-update-resource:
      #     get-rollout-status: true
      #     resource-file-path: ./files/deployment.yaml
      #     resource-name: deployment/app
      #     show-kubectl-command: true

      # - kubernetes/install:
      #     kubectl-version: v1.22.0
      # - command: |
      #     cd files
      #     kubectl apply -f deployment.yaml
      #     kubectl apply -f service.yaml

workflows:
  default:
    jobs:
      # - lint
      # - build-docker
      - create-k8s
